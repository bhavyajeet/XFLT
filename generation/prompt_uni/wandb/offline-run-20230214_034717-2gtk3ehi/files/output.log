02/14/2023 03:47:24 AM [CRITICAL] test: merging the 12 ['as', 'bn', 'en', 'gu', 'hi', 'kn', 'ml', 'mr', 'or', 'pa', 'ta', 'te'] different languages dataset
02/14/2023 03:47:24 AM [INFO] test dataset is already present.
02/14/2023 03:47:25 AM [CRITICAL] test : script unification to Devanagari is enabled.
02/14/2023 03:47:25 AM [INFO] test dataset count : 10216
Testing: 0it [00:00, ?it/s]['', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '']
['Charles Charle Charlie चा Sir George  Eric Clar Charl', 'Matthew Matt Sir Mathe Mats Mat M  Michael Thomas', 'Ital T  Sir A Institution International Antonio Jordan He', 'Hin Bina Hi Heidhinaima Chris Her Him Ab']
tensor([[0.3663, 0.4927, 0.4043, 0.3869, 0.4010, 0.3853, 0.3000, 0.3847, 0.3621,
         0.4892],
        [0.3779, 0.4129, 0.3165, 0.4040, 0.4591, 0.4732, 0.3472, 0.3000, 0.3222,
         0.2912],
        [0.5524, 0.3123, 0.3000, 0.4181, 0.2960, 0.3940, 0.3544, 0.3490, 0.3770,
         0.3504],
        [0.4790, 0.5853, 0.4310, 0.3795, 0.6570, 0.5143, 0.3594, 0.3562, 0.4350,
         0.3587]], device='cuda:0')
tensor([[-2.3351, -2.2087, -2.2970, -2.3144, -2.3003, -2.3160, -2.4013, -2.3166,
         -2.3392, -2.2121],
        [-2.2971, -2.2620, -2.3584, -2.2709, -2.2159, -2.2018, -2.3277, -2.3749,
         -2.3528, -2.3837],
        [-2.1232, -2.3633, -2.3756, -2.2575, -2.3796, -2.2816, -2.3212, -2.3266,
         -2.2986, -2.3252],
        [-2.2840, -2.1778, -2.3320, -2.3836, -2.1061, -2.2488, -2.4037, -2.4069,
         -2.3281, -2.4044]], device='cuda:0')
['Charles', 'Charle', 'Charlie', 'चा', 'Sir', 'Matthew', 'Matt', 'Sir', 'Mathe', 'Mats', 'Ital', 'T', '', 'Sir', 'A', 'Hin', 'Bina', 'Hi', 'Heid', 'hina']
['Anthony Town Edward George James Henry John Thomas Charles', 'Walter  Thomas Quick William Michael Matthew K John Leonard', 'oos Italó Italoriano Italonanoizo', 'ae Kaina Kaaadaanasna']
tensor([[0.3000, 0.4076, 0.3866, 0.3815, 0.3853, 0.3963, 0.3911, 0.3993, 0.3927,
         0.3663],
        [0.3242, 0.3000, 0.2912, 0.3556, 0.2900, 0.3222, 0.3779, 0.3361, 0.2863,
         0.3395],
        [0.3104, 0.3742, 0.5524, 0.4149, 0.5524, 0.4336, 0.5524, 0.3510, 0.3795,
         0.3883],
        [0.4077, 0.3834, 0.4226, 0.5380, 0.4226, 0.4077, 0.3858, 0.3733, 0.3563,
         0.3606]], device='cuda:0')
tensor([[-2.3837, -2.2760, -2.2970, -2.3022, -2.2983, -2.2874, -2.2926, -2.2843,
         -2.2910, -2.3174],
        [-2.3011, -2.3253, -2.3341, -2.2697, -2.3353, -2.3031, -2.2475, -2.2892,
         -2.3390, -2.2858],
        [-2.4268, -2.3630, -2.1848, -2.3223, -2.1848, -2.3035, -2.1848, -2.3862,
         -2.3577, -2.3489],
        [-2.3019, -2.3263, -2.2870, -2.1717, -2.2870, -2.3019, -2.3238, -2.3363,
         -2.3534, -2.3491]], device='cuda:0')
['Charles', 'Charles Anthony', 'Charles Town', 'Charles Edward', 'Charles George', 'Matthew Walter', 'Matthew', 'Matthew Thomas', 'Matthew Quick', 'Matthew William', 'Italo', 'Italos', 'Sir Ital', 'Italó', 'Ital', 'Hina', 'Hine', 'Bina Ka', 'Hinina', 'hina Ka']
['Townsend Town TownErnestHughFrederickEdgarMillsNeil', 'Klein Klein KleinKennethClaudeveldettellCorneliff', 'de Deo  theple डी Victor di-', 'Ka Ka K Ware Kab Ka Ware Kal Kau Kada']
tensor([[0.3866, 0.4164, 0.3866, 0.3866, 0.3898, 0.4110, 0.3970, 0.4225, 0.3999,
         0.3999],
        [0.3373, 0.3373, 0.3373, 0.3055, 0.3365, 0.4260, 0.4358, 0.3372, 0.3337,
         0.4132],
        [0.5039, 0.3886, 0.3104, 0.3000, 0.3447, 0.3925, 0.3988, 0.4424, 0.3937,
         0.2637],
        [0.4226, 0.4226, 0.3568, 0.4000, 0.4472, 0.4226, 0.4000, 0.3869, 0.4752,
         0.4900]], device='cuda:0')
tensor([[-2.3157, -2.2859, -2.3157, -2.3157, -2.3125, -2.2913, -2.3053, -2.2798,
         -2.3024, -2.3024],
        [-2.3262, -2.3262, -2.3262, -2.3581, -2.3271, -2.2376, -2.2277, -2.3263,
         -2.3299, -2.2503],
        [-2.1749, -2.2901, -2.3684, -2.3787, -2.3341, -2.2862, -2.2799, -2.2363,
         -2.2851, -2.4150],
        [-2.3031, -2.3031, -2.3689, -2.3257, -2.2785, -2.3031, -2.3257, -2.3389,
         -2.2505, -2.2357]], device='cuda:0')
['Charles Anthony Town', 'Charles Townsend', 'Charles Edward Town', 'Charles George Town', 'Charles Ernest', 'Matthew Walter Klein', 'Matthew Thomas Klein', 'Matthew William Klein', 'Matthew Kenneth', 'Matthew Claude', 'Italo de', 'Italo De', 'Italoo', 'Italo', 'Italo the', 'Hina Ka', 'Hine Ka', 'Hina K', 'Bina Ka Ware', 'Hina Kab']
['send (sendsend Town  or MC F Po', 'veldveld Kleinveld Kleinvernellvernvedennial', 'zan Zazan Za ZanZa de Zam Zenजान', 'Waregameware Ware Wareoreure is ( Ware']
tensor([[0.4164, 0.3402, 0.4164, 0.4164, 0.3866, 0.3000, 0.3398, 0.4078, 0.3840,
         0.3704],
        [0.4260, 0.4260, 0.3373, 0.4260, 0.3373, 0.3817, 0.3372, 0.3817, 0.3120,
         0.3284],
        [0.6399, 0.4649, 0.6399, 0.4649, 0.5432, 0.4649, 0.5039, 0.4256, 0.3670,
         0.4007],
        [0.4000, 0.3648, 0.4257, 0.4000, 0.4000, 0.3621, 0.4085, 0.3932, 0.2807,
         0.4000]], device='cuda:0')
tensor([[-2.2647, -2.3409, -2.2647, -2.2647, -2.2945, -2.3811, -2.3413, -2.2733,
         -2.2971, -2.3107],
        [-2.2469, -2.2469, -2.3355, -2.2469, -2.3355, -2.2911, -2.3356, -2.2911,
         -2.3608, -2.3444],
        [-2.1581, -2.3331, -2.1581, -2.3331, -2.2548, -2.3331, -2.2941, -2.3724,
         -2.4310, -2.3973],
        [-2.2868, -2.3220, -2.2611, -2.2868, -2.2868, -2.3247, -2.2784, -2.2936,
         -2.4062, -2.2868]], device='cuda:0')
['Charles Anthony Townsend', 'Charles Townsend (', 'Charles Edward Townsend', 'Charles George Townsend', 'Charles Ernest Town', 'Matthew Walter Kleinveld', 'Matthew Thomas Kleinveld', 'Matthew Kenneth Klein', 'Matthew William Kleinveld', 'Matthew Claude Klein', 'Italo dezan', 'Italo de Za', 'Italo Dezan', 'Italo De Za', 'Italo de Zan', 'Hina Ka Ware', 'Hina Kagame', 'Hina Kaware', 'Hine Ka Ware', 'Hina K Ware']
['( 7 ( (send    born', 'tttveldveldvernvedvernellell', '(n ( (n an hanni', '( is was  or ( is ( is is']
tensor([[0.3402, 0.4177, 0.3402, 0.3402, 0.4164, 0.3000, 0.3000, 0.3000, 0.5270,
         0.3000],
        [0.3013, 0.3013, 0.3013, 0.4260, 0.4260, 0.3817, 0.3120, 0.3817, 0.3372,
         0.3372],
        [0.3071, 0.3419, 0.3071, 0.3071, 0.3419, 0.3000, 0.3412, 0.3000, 0.3481,
         0.3536],
        [0.2807, 0.3932, 0.3998, 0.3000, 0.3517, 0.2807, 0.3932, 0.2807, 0.3932,
         0.3932]], device='cuda:0')
tensor([[-2.3231, -2.2456, -2.3231, -2.3231, -2.2469, -2.3633, -2.3633, -2.3633,
         -2.1364, -2.3633],
        [-2.3530, -2.3530, -2.3530, -2.2283, -2.2283, -2.2726, -2.3423, -2.2726,
         -2.3171, -2.3171],
        [-2.3205, -2.2857, -2.3205, -2.3205, -2.2857, -2.3276, -2.2864, -2.3276,
         -2.2795, -2.2740],
        [-2.3699, -2.2573, -2.2507, -2.3505, -2.2989, -2.3699, -2.2573, -2.3699,
         -2.2573, -2.2573]], device='cuda:0')
['Charles Anthony Townsend (', 'Charles Townsend ( 7', 'Charles Edward Townsend (', 'Charles George Townsend (', 'Charles Ernest Townsend', 'Matthew Walter Kleinveldt', 'Matthew Thomas Kleinveldt', 'Matthew William Kleinveldt', 'Matthew Kenneth Kleinveld', 'Matthew Claude Kleinveld', 'Italo dezan (', 'Italo de Zan', 'Italo Dezan (', 'Italo de Zan (', 'Italo De Zan', 'Hina Ka Ware (', 'Hina Ka Ware is', 'Hina Ka Ware was', 'Hina Ka Ware', 'Hina Ka Ware or']
['7 November 7 ( 7   born  born', '( ( (tt    or F', '1 (  1  ( 1   also', 'an born  an, also  b Bina Hin']
tensor([[0.4177, 0.3717, 0.4177, 0.3402, 0.4177, 0.3000, 0.3000, 0.5270, 0.3000,
         0.5270],
        [0.2157, 0.2157, 0.2157, 0.3013, 0.3013, 0.3000, 0.3000, 0.3000, 0.2826,
         0.2926],
        [0.5924, 0.3071, 0.3000, 0.5924, 0.3000, 0.3071, 0.5924, 0.3000, 0.3000,
         0.3693],
        [0.3733, 0.3878, 0.3000, 0.3733, 0.3051, 0.3604, 0.3000, 0.3865, 0.5853,
         0.4790]], device='cuda:0')
tensor([[-2.2801, -2.3261, -2.2801, -2.3577, -2.2801, -2.3979, -2.3979, -2.1709,
         -2.3979, -2.1709],
        [-2.3601, -2.3601, -2.3601, -2.2745, -2.2745, -2.2758, -2.2758, -2.2758,
         -2.2931, -2.2832],
        [-2.1150, -2.4003, -2.4074, -2.1150, -2.4074, -2.4003, -2.1150, -2.4074,
         -2.4074, -2.3381],
        [-2.3180, -2.3035, -2.3913, -2.3180, -2.3862, -2.3310, -2.3913, -2.3048,
         -2.1060, -2.2123]], device='cuda:0')
['Charles Anthony Townsend ( 7', 'Charles Townsend ( 7 November', 'Charles Edward Townsend ( 7', 'Charles Ernest Townsend (', 'Charles George Townsend ( 7', 'Matthew Walter Kleinveldt (', 'Matthew Thomas Kleinveldt (', 'Matthew William Kleinveldt (', 'Matthew Kenneth Kleinveldt', 'Matthew Claude Kleinveldt', 'Italo dezan ( 1', 'Italo de Zan (', 'Italo dezan (', 'Italo Dezan ( 1', 'Italo Dezan (', 'Hina Ka Ware is an', 'Hina Ka Ware ( born', 'Hina Ka Ware (', 'Hina Ka Ware was an', 'Hina Ka Ware,']
['November 1876 November November 7 born  1878 1881 07', 'born born born ( (', '1July ;July,;)', 'Indian) Indian 24 1née 2; 21 14']
/home/bhavyajeet.singh/anaconda3/envs/xalign/lib/python3.7/site-packages/pytorch_lightning/utilities/distributed.py:45: UserWarning: The dataloader, test dataloader 0, does not have many workers which may be a bottleneck. Consider increasing the value of the `num_workers` argument` (try 40 which is the number of cpus on this machine) in the `DataLoader` init to improve performance.
  warnings.warn(*args, **kwargs)
Traceback (most recent call last):
  File "/home/bhavyajeet.singh/msme/MEMS-XF2T/generation/mT5-baseline/main.py", line 582, in <module>
    start_training(args)
  File "/home/bhavyajeet.singh/msme/MEMS-XF2T/generation/mT5-baseline/main.py", line 428, in start_training
    trainer.test(model=model, ckpt_path=checkpoint_file)
  File "/home/bhavyajeet.singh/anaconda3/envs/xalign/lib/python3.7/site-packages/pytorch_lightning/trainer/trainer.py", line 719, in test
    results = self.__test_given_model(model, test_dataloaders)
  File "/home/bhavyajeet.singh/anaconda3/envs/xalign/lib/python3.7/site-packages/pytorch_lightning/trainer/trainer.py", line 784, in __test_given_model
    results = self.fit(model)
  File "/home/bhavyajeet.singh/anaconda3/envs/xalign/lib/python3.7/site-packages/pytorch_lightning/trainer/trainer.py", line 445, in fit
    results = self.accelerator_backend.train()
  File "/home/bhavyajeet.singh/anaconda3/envs/xalign/lib/python3.7/site-packages/pytorch_lightning/accelerators/ddp_accelerator.py", line 148, in train
    results = self.ddp_train(process_idx=self.task_idx, model=model)
  File "/home/bhavyajeet.singh/anaconda3/envs/xalign/lib/python3.7/site-packages/pytorch_lightning/accelerators/ddp_accelerator.py", line 282, in ddp_train
    results = self.train_or_test()
  File "/home/bhavyajeet.singh/anaconda3/envs/xalign/lib/python3.7/site-packages/pytorch_lightning/accelerators/accelerator.py", line 64, in train_or_test
    results = self.trainer.run_test()
  File "/home/bhavyajeet.singh/anaconda3/envs/xalign/lib/python3.7/site-packages/pytorch_lightning/trainer/trainer.py", line 628, in run_test
    eval_loop_results, _ = self.run_evaluation(test_mode=True)
  File "/home/bhavyajeet.singh/anaconda3/envs/xalign/lib/python3.7/site-packages/pytorch_lightning/trainer/trainer.py", line 579, in run_evaluation
    output = self.evaluation_loop.evaluation_step(test_mode, batch, batch_idx, dataloader_idx)
  File "/home/bhavyajeet.singh/anaconda3/envs/xalign/lib/python3.7/site-packages/pytorch_lightning/trainer/evaluation_loop.py", line 169, in evaluation_step
    output = self.trainer.accelerator_backend.test_step(args)
  File "/home/bhavyajeet.singh/anaconda3/envs/xalign/lib/python3.7/site-packages/pytorch_lightning/accelerators/ddp_accelerator.py", line 166, in test_step
    output = self.training_step(args)
  File "/home/bhavyajeet.singh/anaconda3/envs/xalign/lib/python3.7/site-packages/pytorch_lightning/accelerators/ddp_accelerator.py", line 158, in training_step
    output = self.trainer.model(*args)
  File "/home/bhavyajeet.singh/anaconda3/envs/xalign/lib/python3.7/site-packages/torch/nn/modules/module.py", line 727, in _call_impl
    result = self.forward(*input, **kwargs)
  File "/home/bhavyajeet.singh/anaconda3/envs/xalign/lib/python3.7/site-packages/pytorch_lightning/overrides/data_parallel.py", line 179, in forward
    output = self.module.test_step(*inputs[0], **kwargs[0])
  File "/home/bhavyajeet.singh/msme/MEMS-XF2T/generation/mT5-baseline/main.py", line 273, in test_step
    return self._step(batch, 'test')
  File "/home/bhavyajeet.singh/msme/MEMS-XF2T/generation/mT5-baseline/main.py", line 174, in _step
    return_map.update(self._generative_step(batch))
  File "/home/bhavyajeet.singh/msme/MEMS-XF2T/generation/mT5-baseline/main.py", line 136, in _generative_step
    sim_func = similarity.get_similarity
  File "/home/bhavyajeet.singh/anaconda3/envs/xalign/lib/python3.7/site-packages/torch/autograd/grad_mode.py", line 26, in decorate_context
    return func(*args, **kwargs)
  File "/home/bhavyajeet.singh/anaconda3/envs/xalign/lib/python3.7/site-packages/transformers/generation_utils.py", line 1140, in generate
    **model_kwargs,
  File "/home/bhavyajeet.singh/anaconda3/envs/xalign/lib/python3.7/site-packages/transformers/generation_utils.py", line 1932, in beam_search
    sim_tok = sim_func(tokens, inp_str, F.cosine_similarity).mean()
  File "/home/bhavyajeet.singh/msme/MEMS-XF2T/generation/mT5-baseline/similarity.py", line 35, in get_similarity
    fact_embedding = get_embedding(" ".join(facts))[1:-1]
  File "/home/bhavyajeet.singh/msme/MEMS-XF2T/generation/mT5-baseline/similarity.py", line 21, in get_embedding
    states = model(**tokenized_facts).hidden_states
  File "/home/bhavyajeet.singh/anaconda3/envs/xalign/lib/python3.7/site-packages/torch/nn/modules/module.py", line 727, in _call_impl
    result = self.forward(*input, **kwargs)
  File "/home/bhavyajeet.singh/anaconda3/envs/xalign/lib/python3.7/site-packages/transformers/models/bert/modeling_bert.py", line 1001, in forward
    return_dict=return_dict,
  File "/home/bhavyajeet.singh/anaconda3/envs/xalign/lib/python3.7/site-packages/torch/nn/modules/module.py", line 727, in _call_impl
    result = self.forward(*input, **kwargs)
  File "/home/bhavyajeet.singh/anaconda3/envs/xalign/lib/python3.7/site-packages/transformers/models/bert/modeling_bert.py", line 589, in forward
    output_attentions,
  File "/home/bhavyajeet.singh/anaconda3/envs/xalign/lib/python3.7/site-packages/torch/nn/modules/module.py", line 727, in _call_impl
    result = self.forward(*input, **kwargs)
  File "/home/bhavyajeet.singh/anaconda3/envs/xalign/lib/python3.7/site-packages/transformers/models/bert/modeling_bert.py", line 511, in forward
    self.feed_forward_chunk, self.chunk_size_feed_forward, self.seq_len_dim, attention_output
  File "/home/bhavyajeet.singh/anaconda3/envs/xalign/lib/python3.7/site-packages/transformers/modeling_utils.py", line 2186, in apply_chunking_to_forward
    return forward_fn(*input_tensors)
  File "/home/bhavyajeet.singh/anaconda3/envs/xalign/lib/python3.7/site-packages/transformers/models/bert/modeling_bert.py", line 523, in feed_forward_chunk
    layer_output = self.output(intermediate_output, attention_output)
  File "/home/bhavyajeet.singh/anaconda3/envs/xalign/lib/python3.7/site-packages/torch/nn/modules/module.py", line 727, in _call_impl
    result = self.forward(*input, **kwargs)
  File "/home/bhavyajeet.singh/anaconda3/envs/xalign/lib/python3.7/site-packages/transformers/models/bert/modeling_bert.py", line 438, in forward
    hidden_states = self.dense(hidden_states)
  File "/home/bhavyajeet.singh/anaconda3/envs/xalign/lib/python3.7/site-packages/torch/nn/modules/module.py", line 727, in _call_impl
    result = self.forward(*input, **kwargs)
  File "/home/bhavyajeet.singh/anaconda3/envs/xalign/lib/python3.7/site-packages/torch/nn/modules/linear.py", line 93, in forward
    return F.linear(input, self.weight, self.bias)
  File "/home/bhavyajeet.singh/anaconda3/envs/xalign/lib/python3.7/site-packages/torch/nn/functional.py", line 1692, in linear
    output = input.matmul(weight.t())
KeyboardInterrupt