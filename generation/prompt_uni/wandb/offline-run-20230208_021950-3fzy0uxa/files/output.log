02/08/2023 02:19:56 AM [CRITICAL] test: merging the 12 ['as', 'bn', 'en', 'gu', 'hi', 'kn', 'ml', 'mr', 'or', 'pa', 'ta', 'te'] different languages dataset
02/08/2023 02:19:56 AM [INFO] test dataset is already present.
02/08/2023 02:19:57 AM [CRITICAL] test : script unification to Devanagari is enabled.
02/08/2023 02:19:57 AM [INFO] test dataset count : 10216
Testing: 0it [00:00, ?it/s]tensor([[-25.7758, -13.3263, -25.7817,  ..., -25.7942, -25.7754, -25.7838],
        [-25.7758, -13.3263, -25.7817,  ..., -25.7942, -25.7754, -25.7838],
        [-25.7758, -13.3263, -25.7817,  ..., -25.7942, -25.7754, -25.7838],
        ...,
        [-30.3690, -13.4076, -30.3790,  ..., -30.4003, -30.3570, -30.3868],
        [-30.3690, -13.4076, -30.3790,  ..., -30.4003, -30.3570, -30.3868],
        [-30.3690, -13.4076, -30.3790,  ..., -30.4003, -30.3570, -30.3868]],
       device='cuda:0')
tensor([[-24.9026,  -9.5786, -24.9073,  ..., -24.9170, -24.9020, -24.9102],
        [-24.5703,  -9.2213, -24.5803,  ..., -24.5864, -24.5702, -24.5814],
        [-26.4120, -10.9529, -26.4096,  ..., -26.4077, -26.4103, -26.4053],
        ...,
        [-31.8742, -12.5315, -31.8792,  ..., -31.8809, -31.8643, -31.8826],
        [-31.7804, -12.6833, -31.7879,  ..., -31.7946, -31.7699, -31.7937],
        [-30.8527, -10.7377, -30.8615,  ..., -30.8844, -30.8441, -30.8682]],
       device='cuda:0')
tensor([[-22.9403, -16.7770, -22.9433,  ..., -22.9592, -22.9336, -22.9456],
        [-25.1381,  -8.5897, -25.1470,  ..., -25.1494, -25.1398, -25.1473],
        [-26.2262,  -9.3629, -26.2295,  ..., -26.2303, -26.2306, -26.2260],
        ...,
        [-33.2654, -12.3974, -33.2718,  ..., -33.2746, -33.2612, -33.2726],
        [-31.3431, -10.9131, -31.3479,  ..., -31.3621, -31.3346, -31.3525],
        [-32.1868, -12.4962, -32.1876,  ..., -32.1881, -32.1869, -32.1839]],
       device='cuda:0')
tensor([[-33.9059, -28.0986, -33.9094,  ..., -33.9178, -33.8945, -33.9136],
        [-34.0498, -27.4488, -34.0534,  ..., -34.0624, -34.0380, -34.0579],
        [-28.3804,  -8.7862, -28.3824,  ..., -28.3839, -28.3776, -28.3829],
        ...,
        [-34.0343, -12.6167, -34.0388,  ..., -34.0467, -34.0351, -34.0455],
        [-31.4734, -19.6358, -31.4705,  ..., -31.4561, -31.4826, -31.4717],
        [-29.0684, -13.4421, -29.0708,  ..., -29.0635, -29.0719, -29.0709]],
       device='cuda:0')
tensor([[-32.1867, -11.5703, -32.1942,  ..., -32.2120, -32.1877, -32.2012],
        [-32.4618, -11.5351, -32.4695,  ..., -32.4870, -32.4619, -32.4764],
        [-27.5526,  -8.7404, -27.5559,  ..., -27.5597, -27.5567, -27.5543],
        ...,
        [-30.3086,  -9.6967, -30.3152,  ..., -30.3165, -30.3083, -30.3158],
        [-30.3514, -10.1456, -30.3595,  ..., -30.3714, -30.3523, -30.3627],
        [-32.5363, -10.0679, -32.5488,  ..., -32.5690, -32.5330, -32.5558]],
       device='cuda:0')
tensor([[-30.9402, -14.5528, -30.9369,  ..., -30.9380, -30.9339, -30.9387],
        [-31.0310, -14.5261, -31.0281,  ..., -31.0289, -31.0246, -31.0297],
        [-33.6056, -27.2678, -33.6086,  ..., -33.6187, -33.5940, -33.6141],
        ...,
        [-38.4769, -15.2172, -38.4766,  ..., -38.4738, -38.4691, -38.4759],
        [-29.2552, -16.8711, -29.2610,  ..., -29.2642, -29.2571, -29.2616],
        [-39.8763, -15.7214, -39.8785,  ..., -39.8830, -39.8639, -39.8805]],
       device='cuda:0')
tensor([[-39.2658, -21.8610, -39.2674,  ..., -39.2827, -39.2577, -39.2746],
        [-39.6646, -22.0905, -39.6662,  ..., -39.6805, -39.6562, -39.6730],
        [-32.7342, -11.2247, -32.7415,  ..., -32.7579, -32.7350, -32.7480],
        ...,
        [-22.8572,  -8.0119, -22.8605,  ..., -22.8584, -22.8496, -22.8593],
        [-37.5025, -14.7985, -37.5221,  ..., -37.5562, -37.4894, -37.5312],
        [-29.5651, -10.5789, -29.5636,  ..., -29.5631, -29.5594, -29.5628]],
       device='cuda:0')
tensor([[-43.9715, -19.5937, -43.9645,  ..., -43.9403, -43.9624, -43.9578],
        [-43.8990, -19.6363, -43.8921,  ..., -43.8675, -43.8896, -43.8853],
        [-31.2878, -14.4039, -31.2853,  ..., -31.2877, -31.2815, -31.2873],
        ...,
        [-34.1591, -13.1197, -34.1667,  ..., -34.1802, -34.1554, -34.1637],
        [-29.6965, -10.4035, -29.6961,  ..., -29.6841, -29.6936, -29.6939],
        [-26.6832,  -8.4950, -26.6849,  ..., -26.7035, -26.6774, -26.6931]],
       device='cuda:0')
tensor([[-36.4197, -10.8517, -36.4252,  ..., -36.4150, -36.4336, -36.4242],
        [-36.4626, -10.7517, -36.4681,  ..., -36.4577, -36.4766, -36.4670],
        [-39.7645, -21.9936, -39.7661,  ..., -39.7797, -39.7553, -39.7729],
        ...,
        [-40.3161, -25.9505, -40.3254,  ..., -40.3503, -40.3033, -40.3322],
        [-38.7415, -17.9535, -38.7441,  ..., -38.7535, -38.7197, -38.7530],
        [-29.0780, -15.5134, -29.0921,  ..., -29.1145, -29.0787, -29.0907]],
       device='cuda:0')
tensor([[-35.1628, -17.7380, -35.1701,  ..., -35.1688, -35.1735, -35.1683],
        [-35.1955, -17.6978, -35.2025,  ..., -35.2007, -35.2068, -35.2006],
        [-44.0037, -19.3591, -43.9970,  ..., -43.9736, -43.9941, -43.9907],
        ...,
        [-35.0179, -13.6763, -35.0189,  ..., -35.0282, -35.0140, -35.0232],
        [-31.1212, -11.8961, -31.1212,  ..., -31.1306, -31.1025, -31.1303],
        [-34.0794, -12.7452, -34.0745,  ..., -34.0720, -34.0810, -34.0746]],
       device='cuda:0')
tensor([[-37.9193, -19.2239, -37.9186,  ..., -37.9360, -37.9253, -37.9170],
        [-37.9398, -19.1466, -37.9389,  ..., -37.9557, -37.9459, -37.9373],
        [-36.6588, -10.5482, -36.6647,  ..., -36.6555, -36.6735, -36.6641],
        ...,
        [-29.5207, -11.4505, -29.5233,  ..., -29.5317, -29.5162, -29.5249],
        [-34.3137, -18.6523, -34.3201,  ..., -34.3411, -34.3077, -34.3244],
        [-27.2037,  -7.6369, -27.2007,  ..., -27.1823, -27.1934, -27.2009]],
       device='cuda:0')
tensor([[-47.7363, -16.1088, -47.7374,  ..., -47.7614, -47.7294, -47.7430],
        [-47.8185, -16.0333, -47.8196,  ..., -47.8431, -47.8117, -47.8251],
        [-35.5676, -17.6560, -35.5749,  ..., -35.5733, -35.5789, -35.5734],
        ...,
        [-32.1904,  -9.7748, -32.1984,  ..., -32.2335, -32.1741, -32.2145],
        [-28.3203,  -9.9841, -28.3255,  ..., -28.3348, -28.3167, -28.3258],
        [-29.4373, -17.1989, -29.4457,  ..., -29.4640, -29.4315, -29.4490]],
       device='cuda:0')
tensor([[-46.2341, -31.5908, -46.2347,  ..., -46.2638, -46.2205, -46.2436],
        [-46.2176, -31.4780, -46.2179,  ..., -46.2462, -46.2043, -46.2266],
        [-38.0602, -19.0504, -38.0599,  ..., -38.0775, -38.0660, -38.0588],
        ...,
        [-30.6746, -11.1780, -30.6818,  ..., -30.7087, -30.6662, -30.6903],
        [-31.5354, -15.9486, -31.5508,  ..., -31.5935, -31.5162, -31.5660],
        [-29.3510, -10.4445, -29.3542,  ..., -29.3697, -29.3493, -29.3584]],
       device='cuda:0')
tensor([[-45.4318, -22.3385, -45.4310,  ..., -45.4429, -45.4168, -45.4352],
        [-45.3620, -22.2350, -45.3612,  ..., -45.3722, -45.3471, -45.3651],
        [-47.9381, -15.9615, -47.9392,  ..., -47.9620, -47.9310, -47.9448],
        ...,
        [-43.2378, -19.8385, -43.2400,  ..., -43.2417, -43.2303, -43.2429],
        [-29.7973, -19.0696, -29.8041,  ..., -29.8216, -29.7948, -29.8064],
        [-44.3112, -19.1215, -44.3088,  ..., -44.2937, -44.3107, -44.3092]],
       device='cuda:0')
tensor([[-45.8676, -12.2540, -45.8649,  ..., -45.8404, -45.8715, -45.8645],
        [-45.8377, -12.0128, -45.8354,  ..., -45.8110, -45.8417, -45.8352],
        [-46.2723, -31.3329, -46.2728,  ..., -46.3015, -46.2586, -46.2821],
        ...,
        [-37.3502, -11.1990, -37.3586,  ..., -37.3672, -37.3473, -37.3587],
        [-36.8718, -10.9111, -36.8809,  ..., -36.8847, -36.8695, -36.8799],
        [-31.1521, -10.7042, -31.1589,  ..., -31.1768, -31.1457, -31.1650]],
       device='cuda:0')
tensor([[-38.7907, -21.6880, -38.7912,  ..., -38.7867, -38.7890, -38.7928],
        [-38.8948, -21.6616, -38.8952,  ..., -38.8895, -38.8937, -38.8965],
        [-45.1399, -22.0102, -45.1390,  ..., -45.1500, -45.1251, -45.1430],
        ...,
        [-40.2966, -13.3228, -40.3038,  ..., -40.3099, -40.2962, -40.3032],
        [-44.8049, -19.4872, -44.8040,  ..., -44.7873, -44.8049, -44.8032],
        [-40.9545, -13.2822, -40.9622,  ..., -40.9594, -40.9552, -40.9594]],
       device='cuda:0')
tensor([[-35.1760, -11.1149, -35.1804,  ..., -35.1908, -35.1778, -35.1882],
        [-35.4008, -10.9480, -35.4058,  ..., -35.4162, -35.4024, -35.4135],
        [-46.4849, -11.8005, -46.4825,  ..., -46.4589, -46.4890, -46.4831],
        ...,
        [-45.5591, -24.9927, -45.5624,  ..., -45.5678, -45.5448, -45.5601],
        [-45.2571, -17.5523, -45.2566,  ..., -45.2693, -45.2474, -45.2641],
        [-37.5452, -10.9950, -37.5545,  ..., -37.5603, -37.5426, -37.5539]],
       device='cuda:0')
tensor([[-38.0917, -14.7616, -38.0887,  ..., -38.0905, -38.0873, -38.0909],
        [-38.4809, -14.7153, -38.4781,  ..., -38.4803, -38.4764, -38.4801],
        [-39.0000, -21.4418, -39.0001,  ..., -38.9946, -38.9988, -39.0020],
        ...,
        [-40.1324, -18.3226, -40.1304,  ..., -40.1421, -40.1198, -40.1325],
        [-34.8034, -12.3896, -34.8101,  ..., -34.8288, -34.8011, -34.8161],
        [-41.7328, -13.7017, -41.7400,  ..., -41.7383, -41.7348, -41.7377]],
       device='cuda:0')
tensor([[-36.6563, -14.6638, -36.6702,  ..., -36.6876, -36.6436, -36.6760],
        [-36.7980, -14.5440, -36.8123,  ..., -36.8300, -36.7850, -36.8181],
        [-35.5573, -10.8004, -35.5626,  ..., -35.5745, -35.5594, -35.5712],
        ...,
        [-33.7712,  -9.7347, -33.7731,  ..., -33.7819, -33.7701, -33.7794],
        [-36.9591,  -9.7345, -36.9648,  ..., -36.9771, -36.9586, -36.9688],
        [-45.6932, -25.0182, -45.6966,  ..., -45.6959, -45.6820, -45.6922]],
       device='cuda:0')
tensor([[-30.7080,  -9.7758, -30.7152,  ..., -30.7303, -30.6988, -30.7186],
        [-30.7701,  -9.6961, -30.7773,  ..., -30.7918, -30.7607, -30.7805],
        [-38.6188, -14.6725, -38.6160,  ..., -38.6187, -38.6146, -38.6185],
        ...,
        [-28.7486,  -9.4640, -28.7552,  ..., -28.7680, -28.7466, -28.7568],
        [-40.7722, -18.2865, -40.7701,  ..., -40.7825, -40.7597, -40.7735],
        [-41.6025, -19.3741, -41.6045,  ..., -41.6182, -41.6011, -41.6084]],
       device='cuda:0')
tensor([[-31.3396, -18.7134, -31.3488,  ..., -31.3733, -31.3346, -31.3528],
        [-31.4271, -18.7062, -31.4362,  ..., -31.4601, -31.4221, -31.4400],
        [-34.9188, -12.6288, -34.9275,  ..., -34.9210, -34.9169, -34.9242],
        ...,
        [-34.5685,  -9.0754, -34.5700,  ..., -34.5730, -34.5704, -34.5751],
        [-28.0294, -19.0134, -28.0387,  ..., -28.0415, -28.0279, -28.0345],
        [-39.9167, -14.4163, -39.9190,  ..., -39.9154, -39.9113, -39.9222]],
       device='cuda:0')
/home/bhavyajeet.singh/anaconda3/envs/xalign/lib/python3.7/site-packages/pytorch_lightning/utilities/distributed.py:45: UserWarning: The dataloader, test dataloader 0, does not have many workers which may be a bottleneck. Consider increasing the value of the `num_workers` argument` (try 40 which is the number of cpus on this machine) in the `DataLoader` init to improve performance.
  warnings.warn(*args, **kwargs)
Traceback (most recent call last):
  File "/home/bhavyajeet.singh/msme/MEMS-XF2T/generation/mT5-baseline/main.py", line 580, in <module>
    start_training(args)
  File "/home/bhavyajeet.singh/msme/MEMS-XF2T/generation/mT5-baseline/main.py", line 426, in start_training
    trainer.test(model=model, ckpt_path=checkpoint_file)
  File "/home/bhavyajeet.singh/anaconda3/envs/xalign/lib/python3.7/site-packages/pytorch_lightning/trainer/trainer.py", line 719, in test
    results = self.__test_given_model(model, test_dataloaders)
  File "/home/bhavyajeet.singh/anaconda3/envs/xalign/lib/python3.7/site-packages/pytorch_lightning/trainer/trainer.py", line 784, in __test_given_model
    results = self.fit(model)
  File "/home/bhavyajeet.singh/anaconda3/envs/xalign/lib/python3.7/site-packages/pytorch_lightning/trainer/trainer.py", line 445, in fit
    results = self.accelerator_backend.train()
  File "/home/bhavyajeet.singh/anaconda3/envs/xalign/lib/python3.7/site-packages/pytorch_lightning/accelerators/ddp_accelerator.py", line 148, in train
    results = self.ddp_train(process_idx=self.task_idx, model=model)
  File "/home/bhavyajeet.singh/anaconda3/envs/xalign/lib/python3.7/site-packages/pytorch_lightning/accelerators/ddp_accelerator.py", line 282, in ddp_train
    results = self.train_or_test()
  File "/home/bhavyajeet.singh/anaconda3/envs/xalign/lib/python3.7/site-packages/pytorch_lightning/accelerators/accelerator.py", line 64, in train_or_test
    results = self.trainer.run_test()
  File "/home/bhavyajeet.singh/anaconda3/envs/xalign/lib/python3.7/site-packages/pytorch_lightning/trainer/trainer.py", line 628, in run_test
    eval_loop_results, _ = self.run_evaluation(test_mode=True)
  File "/home/bhavyajeet.singh/anaconda3/envs/xalign/lib/python3.7/site-packages/pytorch_lightning/trainer/trainer.py", line 579, in run_evaluation
    output = self.evaluation_loop.evaluation_step(test_mode, batch, batch_idx, dataloader_idx)
  File "/home/bhavyajeet.singh/anaconda3/envs/xalign/lib/python3.7/site-packages/pytorch_lightning/trainer/evaluation_loop.py", line 169, in evaluation_step
    output = self.trainer.accelerator_backend.test_step(args)
  File "/home/bhavyajeet.singh/anaconda3/envs/xalign/lib/python3.7/site-packages/pytorch_lightning/accelerators/ddp_accelerator.py", line 166, in test_step
    output = self.training_step(args)
  File "/home/bhavyajeet.singh/anaconda3/envs/xalign/lib/python3.7/site-packages/pytorch_lightning/accelerators/ddp_accelerator.py", line 158, in training_step
    output = self.trainer.model(*args)
  File "/home/bhavyajeet.singh/anaconda3/envs/xalign/lib/python3.7/site-packages/torch/nn/modules/module.py", line 727, in _call_impl
    result = self.forward(*input, **kwargs)
  File "/home/bhavyajeet.singh/anaconda3/envs/xalign/lib/python3.7/site-packages/pytorch_lightning/overrides/data_parallel.py", line 179, in forward
    output = self.module.test_step(*inputs[0], **kwargs[0])
  File "/home/bhavyajeet.singh/msme/MEMS-XF2T/generation/mT5-baseline/main.py", line 271, in test_step
    return self._step(batch, 'test')
  File "/home/bhavyajeet.singh/msme/MEMS-XF2T/generation/mT5-baseline/main.py", line 172, in _step
    return_map.update(self._generative_step(batch))
  File "/home/bhavyajeet.singh/msme/MEMS-XF2T/generation/mT5-baseline/main.py", line 134, in _generative_step
    tokenizer = self.tokenizer
  File "/home/bhavyajeet.singh/anaconda3/envs/xalign/lib/python3.7/site-packages/torch/autograd/grad_mode.py", line 26, in decorate_context
    return func(*args, **kwargs)
  File "/home/bhavyajeet.singh/anaconda3/envs/xalign/lib/python3.7/site-packages/transformers/generation_utils.py", line 1070, in generate
    **model_kwargs,
  File "/home/bhavyajeet.singh/anaconda3/envs/xalign/lib/python3.7/site-packages/transformers/generation_utils.py", line 1861, in beam_search
    eos_token_id=eos_token_id,
  File "/home/bhavyajeet.singh/anaconda3/envs/xalign/lib/python3.7/site-packages/transformers/generation_beam_search.py", line 225, in process
    if self._done[batch_idx]:
KeyboardInterrupt