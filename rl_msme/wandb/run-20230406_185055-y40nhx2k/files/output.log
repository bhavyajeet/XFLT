
[38mic| model_gpus: [1]
[38mic| next(model.parameters()).is_cuda: True
[38mic| start_epoch: 0, final_checkpoint: None
  0%|                                                                                                                                                                           | 0/5 [00:00<?, ?it/s]



  0%|                                                                                                                                                                           | 0/5 [00:06<?, ?it/s]
Traceback (most recent call last):
  File "train_ddp.py", line 409, in <module>
    main()
  File "train_ddp.py", line 356, in main
    total_loss.backward()
  File "/home2/aditya_hari/miniconda3/envs/multisent/lib/python3.7/site-packages/torch/_tensor.py", line 489, in backward
    self, gradient, retain_graph, create_graph, inputs=inputs
  File "/home2/aditya_hari/miniconda3/envs/multisent/lib/python3.7/site-packages/torch/autograd/__init__.py", line 199, in backward
    allow_unreachable=True, accumulate_grad=True)  # Calls into the C++ engine to run the backward pass
torch.cuda.OutOfMemoryError: CUDA out of memory. Tried to allocate 764.00 MiB (GPU 1; 10.76 GiB total capacity; 8.46 GiB already allocated; 690.69 MiB free; 9.07 GiB reserved in total by PyTorch) If reserved memory is >> allocated memory try setting max_split_size_mb to avoid fragmentation.  See documentation for Memory Management and PYTORCH_CUDA_ALLOC_CONF